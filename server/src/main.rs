use std::io::{ErrorKind, Read, Write};
use std::net::TcpListener;
use std::sync::{mpsc, Arc};
use std::thread;
use std::collections::HashMap;
use std::net::TcpStream;
use std::io;

const LOCAL: &str = "127.0.0.1:6000";
const MSG_SIZE: usize = 32;

pub struct ServerModel {
    users: HashMap<i32, TcpStream>
  }
  impl ServerModel {
    pub fn new() -> ServerModel {
      ServerModel {
        users: HashMap::new()
      }
    }
    pub fn register_user(&mut self ,client:TcpStream) ->i32{
        let id = self.generate_id();
        self.users.insert(id,client);
        id
      }
      fn generate_id(&self) -> i32 {
        let mut available_int = 0;
        for i in 0..self.users.len() {
          if self.users.contains_key(&(i as i32)) {
            available_int += 1;
          } else {
            break;
          }
        }
        available_int
      }

}
fn sleep() {
    thread::sleep(::std::time::Duration::from_millis(100));
}

fn main() {
    let server = TcpListener::bind(LOCAL).expect("Listener failed to bind");
    server.set_nonblocking(true).expect("failed to initialize non-blocking");

    let mut clients = vec![];
    let mut model = ServerModel::new();
    let (tx, rx) = mpsc::channel::<String>();
    loop {
        if let Ok((mut socket, addr)) = server.accept() {
            println!("Client {} connected", addr);

            let tx = tx.clone();

            clients.push(socket.try_clone().expect("failed to clone client"));
            let socket_clone=socket.try_clone().expect("failed to clone client");
            let id = model.register_user(socket_clone);
            socket.write_all(&id.to_le_bytes()).expect("Could not write ID to client.");
		        println!("Sent id of {} to {}", id, socket.peer_addr().unwrap().to_string());
            thread::spawn(move || loop {
                let mut buff = vec![0; MSG_SIZE];

                match socket.read_exact(&mut buff) {
                    Ok(_) => {
                        let msg = buff.into_iter().take_while(|&x| x != 0).collect::<Vec<_>>();
                        let msg = String::from_utf8(msg).expect("Invalid utf8 message");
                        /*if(msg==":users") {
                          let test:Vec<_>=clients.iter().map(|x| x.peer_addr().unwrap().to_string()).collect();

                        }
                        else {*/
                          println!("{}: {:?}", addr, msg);
                        tx.send(msg).expect("failed to send msg to rx");
                    }, 
                    Err(ref err) if err.kind() == ErrorKind::WouldBlock => (),
                    Err(_) => {
                        println!("closing connection with: {}", addr);
                        break;
                    }
                }

                sleep();
            });
        }

        if let Ok(msg) = rx.try_recv() {
          if(msg=="users"){
            
              //let test=clients.into_iter().map(|x| x.peer_addr().unwrap().to_string()).collect::<Vec<_>>();
              for (key, value) in &model.users {
                println!("{}: {}", key, value.peer_addr().unwrap().to_string());
            }
            
          }
          else{
            clients = clients.into_iter().filter_map(|mut client| {
                let mut buff = msg.clone().into_bytes();
                buff.resize(MSG_SIZE, 0);

                client.write_all(&buff).map(|_| client).ok()
            }).collect::<Vec<_>>();}
        }

        sleep();
    }
}
