use std::io::{ErrorKind, Read, Write};
use std::net::TcpListener;
use std::sync::mpsc;
use std::thread;
use std::collections::HashMap;
use std::net::TcpStream;


const LOCAL: &str = "127.0.0.1:6000";
const MSG_SIZE: usize = 32;

pub struct ServerModel {
    users: HashMap<i32, TcpStream>
  }
impl ServerModel {
  pub fn new() -> ServerModel {
     ServerModel {
      users: HashMap::new()
      }
  }
  pub fn register_user(&mut self ,client:TcpStream) ->i32{
   let id = self.generate_id();
    self.users.insert(id,client);
    id
  }
  fn generate_id(&self) -> i32 {
    let mut available_int = 0;
    for i in 0..self.users.len() {
        if self.users.contains_key(&(i as i32)) {
            available_int += 1;
          } 
        else {
            break;
          }
    }
  available_int
  }
//  fn get_users()

}
fn sleep() {
    thread::sleep(::std::time::Duration::from_millis(100));
}

fn command_handler(mut client:&TcpStream,msg:&str,clients:&Vec<TcpStream>){
 match msg {
  "users" => {
    for mut cl in clients {
     let mut clients=cl.try_clone().expect("failed to clone client").peer_addr().unwrap().to_string();
      let byte3: Vec<u8> = clients.as_bytes().to_vec();
      client.write_all(&byte3);
    }

  },
  _ =>println!("rien ")
 }
}

fn main() {
    let server = TcpListener::bind(LOCAL).expect("Listener failed to bind");
    server.set_nonblocking(true).expect("failed to initialize non-blocking");

    let mut clients = vec![];
    let mut model = ServerModel::new();
    let (tx, rx) = mpsc::channel::<String>();
    loop {
        if let Ok((mut socket, addr)) = server.accept() {
            println!("Client {} connected", addr);

            let tx = tx.clone();
            clients.push(socket.try_clone().expect("failed to clone client"));
            let socket_clone=socket.try_clone().expect("failed to clone client");
            let id = model.register_user(socket_clone);
            socket.write_all(&id.to_le_bytes()).expect("Could not write ID to client.");
		        println!("Sent id of {} to {}", id, socket.peer_addr().unwrap().to_string());
            thread::spawn(move || loop {
                let mut buff = vec![0; MSG_SIZE];
                match socket.read_exact(&mut buff) {
                    Ok(_) => {
                        let msg = buff.into_iter().take_while(|&x| x != 0).collect::<Vec<_>>();
                        let msg = String::from_utf8(msg).expect("Invalid utf8 message"); 
                                        
                        //command_handler (&socket,&msg,&clients);
                        println!("{}: {:?}", addr, msg);
                        tx.send(msg).expect("failed to send msg to rx");
                    }, 
                    Err(ref err) if err.kind() == ErrorKind::WouldBlock => (),
                    Err(_) => {
                        println!("closing connection with: {}", addr);
                        break;
                    }
                }

                sleep();
            });
        }
        let recv_result = rx.try_recv().map(|msg| {
          let mut msg = msg.into_bytes();
          msg.resize(MSG_SIZE, 0);
          msg
      });
      if let Ok(msg) = recv_result {
        // Try to send message from master channel
        clients = clients.into_iter().filter_map(|mut client| {
            if client.write_all(&msg).is_ok() {
                Some(client)
            } else {
                None
            }
        }).collect::<Vec<_>>();
    }
        sleep();
    }
}
